
// https://www.blocklayer.com/rpm-gear.aspx

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
struct gear_speed
{
    unsigned g1[3];
    unsigned g2[3];
    unsigned g3[3];
    unsigned g4[3];
    unsigned g5[3];
    unsigned g6[3];
    unsigned g7[3];
    unsigned g8[3];
    unsigned g9[3];
    unsigned g10[3];
} gg;

struct G
{
    int t10[6][3] = {{1, 6, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}};
    int t20[6][3] = {{1, 13, 1000}, {2, 18, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}};
};
unordered_map<int, gear_speed>::iterator g_ptr;
unordered_map<int, gear_speed> g = {
    {10, {{1, 6, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}, {2, 9, 500}}},
    {20, {{1, 13, 1000}, {2, 18, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}}},
    {30, {{1, 19, 1500}, {2, 27, 1500}, {3, 39, 1500}, {3, 39, 1500}, {3, 39, 1500}, {3, 39, 1500}}},
    {40, {{1, 25, 2000}, {2, 36, 2000}, {3, 52}, {4, 75, 2000}, {4, 75, 2000}, {4, 75, 2000}}},
    {50, {{1, 32, 2500}, {2, 45, 2500}, {3, 66, 2500}, {4, 94, 2500}, {5, 112, 2500}, {5, 112, 2500}}},
    {60, {{1, 38, 3000}, {2, 54, 3000}, {3, 79, 3000}, {4, 112, 3000}, {5, 134, 3000}, {6, 201, 3000}}},
    {70, {{1, 44, 3500}, {2, 63, 3500}, {3, 92, 3500}, {4, 131, 3500}, {5, 156, 3500}, {6, 234, 3500}}},
    {80, {{1, 50, 4000}, {2, 72, 4000}, {3, 105, 4000}, {4, 150, 4000}, {5, 178, 4000}, {6, 268, 4000}}},
    {90, {{1, 57, 4500}, {2, 81, 4500}, {3, 118, 4500}, {4, 1169, 4500}, {5, 201, 4500}, {6, 301, 4500}}},
    {100, {{1, 63, 5000}, {2, 91, 5000}, {3, 131, 5000}, {4, 187, 5000}, {5, 223, 5000}, {6, 335, 5000}}}};

unordered_map<int, gear_speed> gv = {
    {10, {{1, 6, 500}, {1, 13, 1000}, {1, 19, 1500}, {1, 25, 2000}, {1, 32, 2500}, {1, 38, 3000}, {1, 44, 3500}, {1, 50, 4000}, {1, 57, 4500}, {1, 63, 5000}}},
    {20, {{2, 9, 500}, {2, 18, 1000}, {2, 27, 1500}, {2, 36, 2000}, {2, 45, 2500}, {2, 54, 3000}, {2, 63, 3500}, {2, 72, 4000}, {2, 81, 4500}, {2, 91, 5000}}},
    {30, {{2, 9, 500}, {3, 26, 1000}, {3, 39, 1500}, {3, 52, 2000}, {3, 66, 2500}, {3, 79, 3000}, {3, 92, 3500}, {3, 105, 4000}, {3, 118, 4500}, {3, 131, 5000}}},
    {40, {{2, 9, 500}, {3, 26, 1000}, {3, 39, 1500}, {4, 75, 2000}, {4, 94, 2500}, {4, 112, 3000}, {4, 131, 3500}, {4, 150, 4000}, {4, 1169, 4500}, {4, 187, 5000}}},
    {50, {{2, 9, 500}, {3, 26, 1000}, {3, 39, 1500}, {4, 75, 2000}, {5, 112, 2500}, {5, 134, 3000}, {5, 156, 3500}, {5, 178, 4000}, {5, 201, 4500}, {5, 223, 5000}}},
    {60, {{2, 9, 500}, {3, 26, 1000}, {3, 39, 1500}, {4, 75, 2000}, {5, 112, 2500}, {6, 201, 3000}, {6, 234, 3500}, {6, 268, 4000}, {6, 301, 4500}, {6, 335, 5000}}}};

vector<vector<vector<int>>> T{
    /*th0%*/ {{0, 0, 0}, {0, 0, 00}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 430}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    /*th10%*/ {{1, 6, 500}, {1, 6, 420}, {2, 9, 500}, {2, 9, 430}, {3, 13, 500}, {3, 13, 430}, {3, 9, 500}, {3, 9, 430}, {3, 9, 500}, {3, 9, 430}, {3, 9, 500}},
    /*th20%*/ {{1, 13, 1000}, {1, 13, 720}, {2, 18, 1000}, {2, 18, 720}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}, {3, 26, 1000}},
    /*th30%*/ {{1, 19, 1500}, {2, 27, 900}, {2, 27, 1500}, {2, 27, 900}, {3, 39, 1500}, {3, 39, 900}, {4, 56, 1500}, {4, 56, 1500}, {4, 56, 1500}, {4, 56, 1500}, {4, 56, 1500}},
    /*th40%*/ {{1, 25, 2000}, {1, 25, 1400}, {2, 36, 2000}, {2, 36, 1400}, {3, 52, 2000}, {3, 52, 1400}, {4, 75, 2000}, {4, 75, 1400}, {5, 89, 2000}, {5, 89, 2000}, {5, 89, 2000}},
    /*th50%*/ {{1, 32, 2500}, {1, 45, 1750}, {2, 45, 2500}, {2, 45, 1750}, {3, 66, 2500}, {3, 66, 1750}, {4, 94, 2500}, {4, 94, 1750}, {5, 112, 2500}, {5, 112, 1750}, {5, 112, 2500}},
    /*th60%*/ {{1, 38, 3000}, {1, 38, 2100}, {2, 54, 3000}, {2, 54, 2100}, {3, 79, 3000}, {3, 79, 2100}, {4, 112, 3000}, {4, 112, 2100}, {5, 134, 3000}, {5, 132, 2100}, {6, 201, 3000}},
    /*th70%*/ {{1, 44, 3500}, {1, 44, 2500}, {2, 63, 3500}, {2, 63, 2500}, {3, 92, 3500}, {3, 92, 2500}, {4, 131, 3500}, {4, 131, 2500}, {5, 156, 3500}, {5, 156, 2500}, {6, 234, 3500}},
    /*th80%*/ {{1, 50, 4000}, {1, 50, 2800}, {2, 72, 4000}, {2, 72, 2800}, {3, 105, 4000}, {3, 105, 2800}, {4, 150, 4000}, {4, 150, 2800}, {5, 178, 4000}, {5, 178, 2800}, {6, 268, 4000}},
    /*th90%*/ {{1, 57, 4500}, {1, 57, 3200}, {2, 81, 4500}, {2, 81, 3200}, {3, 118, 4500}, {3, 118, 3200}, {4, 169, 4500}, {4, 169, 3200}, {5, 201, 4500}, {5, 201, 3200}, {6, 301, 4500}},
    /*th100%*/ {{1, 63, 5000}, {1, 63, 3000}, {2, 91, 5000}, {2, 91, 3000}, {3, 131, 5000}, {3, 131, 3000}, {4, 187, 5000}, {4, 187, 3000}, {5, 223, 5000}, {5, 223, 3000}, {6, 335, 5000}}};

const static int MAX_GEAR = 6 + 5;

bool GearIncEven(int &rpm, const int &rpm_start, const int &rpm_end)
{
    int rpm_out= rpm_start;
    bool rpm_feedback{false};
    rpm_out = rpm + 100;
    if (rpm_out < rpm_end)
    {
        rpm = rpm_out;
        rpm_feedback = true;
    }
    else
    {
        rpm = rpm_end;
        rpm_feedback = false;
    }
    return rpm_feedback;
}

int main()
{
    int from_thr = 1; 
    int to_thr = 5;
    int GearIndx= 2;
    int g = MAX_GEAR-1;
    int rpm_{T[from_thr][g][GearIndx]};
    bool fb{false};
    if (from_thr != to_thr){
        for (g= 0; g<11; g++){
            cout << "   Gear: " << T[to_thr][g][0] << endl;
        do
        {
            fb = GearIncEven(rpm_, T[from_thr][g][GearIndx], T[to_thr][g][GearIndx]);
            cout << "RPM: " << rpm_ << endl;
        } while (fb);
        }
    }
}
    // cout << "throttle 10 ,gear 1, speed " << T[0][0][1] << endl;
    // cout << "throttle 10 ,gear 1, speed " << T[1][2][1] << endl;
    // cout << "throttle 30 ,gear 5, speed " << T[2][4][1] << endl;
    // cout << "throttle 60 ,gear 6, speed " << T[3][6][1] << endl;
    // cout << "throttle 10 ,gear 7, speed " << T[4][8][1] << endl;
    // for (int t = 0; t < 6; t++)
    // {
    //     cout << " Speed: " << T[0][t][1] << endl;
    // }

    // for (g_ptr = g.begin(); g_ptr != g.end(); g_ptr++)
    // {
    //     cout << "*** " << g_ptr->first << " " << g_ptr->second.g1[1] << endl;
    // }
    // unsigned **r = g;
    // for (auto x : g)
    // {
    //     cout << "map map ****" << x.first << " " << x.second.g1[1] << endl;
    // }
    // cout << endl;
    // for (auto x : gv)
    // {
    //     cout << "map GV: " << x.first << " " << x.second.g1[1] << endl;
    // }
    // cout << g.at(10).g1[1] << endl;